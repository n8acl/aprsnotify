{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":""},{"location":"#current-release-100","title":"Current Release 1.0.0","text":"<p>Welcome to APRSNotify2 - a python based bot script designed to send parsed APRS packet data to Various Social Networks. This bot was designed to be used by one person with multiple APRS Trackers to track packets for that one person.</p> <p>This Wiki is designed as a user guide for the end users of the software.</p> <p>This software is for use by Amateur Radio Operators Only</p> <p>Please do not use this to send postions of Fixed Stations or Digipeaters. This is designed to be used to track mobile stations.</p>"},{"location":"#important-information","title":"Important Information","text":"<p>As you will see later in the Configuration Guide, an_til.py is a Flask Application. Flask is a Web Framework for Python that allows you to create web based applications in Python.</p> <p>When you run the an_util.py, this will start a small webserver for you to connect to in order to make changes to the configurations of the script. </p> <p>I would recommend NOT exposing this web server to the outside world. It is an insecure server and only designed to be run behind a secured firewall. I would also recommend NOT leaving it running all the time for the same reason.</p> <p>If you need to make changes and are not at home, I would recommend setting up a secure way to connect back into your network, preferably by a VPN, to run and make changes.</p> <p>You have thusly been warned and it is now your responsibiliy to make sure you are running things securely.</p>"},{"location":"#contact-me","title":"Contact Me","text":"<p>If you have questions, please feel free to reach out to me. You can reach me in one of the following ways:</p> <ul> <li>Discord: Ravendos</li> <li>Mastodon: @n8acl@mastodon.radio</li> <li>E-mail: n8acl@qsl.net</li> </ul> <p>If you reach out to me and have an error, please include what error you are getting and what you were doing. I may also ask you to send me certain files to look at. Otherwise just reach out to me :).</p>"},{"location":"about/","title":"About APRSNotify","text":""},{"location":"about/#features","title":"Features","text":"<ul> <li>Pulls most recent packet data from APRS.fi API for the following types of packets:</li> <li>Position Data</li> <li>Weather Station Data</li> <li>Reverse Geocode with OpenStreetMaps API.</li> <li>Get Weather Conditions from WeatherAPI for the location of the position packet</li> <li>Find Maidenhead Grid Square of packet location.</li> <li>Send Status to Social Media Networks (See the Supported Services Page)</li> <li>Get notification of an APRS message sent to your station (see below for supported Networks). If someone sends a message via APRS to one of the callsigns being tracked, the script will notify you and share the message with you.</li> </ul>"},{"location":"about/#description","title":"Description","text":"<p>This script will pull your most recent APRS packet data from the APRS.fi API, will parse the data and send the data to various social media and other communications networks. The script will only pull your most recent packet and post it once.</p> <p>This script can also notify you if someone/something sends you a message on APRS. This way you can stay on top and see if there are messages being sent to you by another station. This is useful, for example, for monitoring a remote station. If something trips a sensor, a message could be sent via APRS to someone and then they know that something has happened at the remote site.</p> <p>Note that this bot was designed to be used by one person with multiple APRS Trackers to track packets for that one person.</p> <p>If you would like to see a working example, at least on Mastodon of what the script does, please check out @n8acl_aprs on Mastodon.</p>"},{"location":"about/#history","title":"History","text":"<p>This script was born many years ago out of a need to be able to let non-ham radio family members be able to track me while I was traveling to have a general idea of where I was. This was before things like Find my Friends on iPhone. I had found a similiar script back then, based in PHP (which, the developer of that script and I became friends), but after a while abandoned it and over the last few years have been developing my own version. This was out of a need to do something different than that script offered and wanting to hone my own development skills.</p> <p>Earlier versions of this script were written in PHP, but after getting my first Raspberry Pi, I decided I wanted to learn Python so started porting the program to Python and have not looked back. Python is so much fun.</p> <p>At one point, it only posted to Twitter and then I added Telegram as a second script. I had both up on github at one point to share with the rest of the Amateur Radio Community, but I finally realised that having everything on one code base made it so much easier to update everything last year (2020), and so APRSNotify was born. It was at that point that adding more services became a reality.</p> <p>There is much more in the works for this application, so as always, stay tuned.</p>"},{"location":"changelog/","title":"Change Log (changes prior to 2024)","text":"<ul> <li>02/03/2023</li> <li>Removed support for Twitter from the script. </li> <li> <p>Updated the Wiki to reflect current changes to the script.</p> </li> <li> <p>01/24/2023 - Minor Update</p> </li> <li> <p>Put the flask package back in the requirements.txt file. Accidently deleted it and did not realize it. (Thanks to Russ, KV4S for catching this one.)</p> </li> <li> <p>05/24/2022 - Minor updates - *** THIS DOES NOT REQUIRE RUNNING THE UPDATE SCRIPT ***</p> <ul> <li>Moved Wiki to Github pages using MKDocs - Link</li> <li>Minor Change to how Telegram sends messages</li> <li>Updates to README.md file</li> </ul> </li> <li> <p>01/21/2022 - Release 01222022</p> <ul> <li>Added Support for Slack</li> <li>Added Messaging support for Mattermost, Slack</li> <li>Added Support to send to Club Servers (See above networks table for supported networks)</li> <li>Added ability to find current release number from command line</li> <li>Changed versioning system to date of release (similar to Home Assistant and other applications)</li> <li>Fixed Various bugs found</li> <li>Updates to Wiki</li> <li>Added Club Configuration and how to for server admins to allow club members to send to the server.</li> <li>Moved Change Log entres prior to 2022 to a wiki page. This is to help clean up the README File a little.</li> </ul> </li> <li> <p>01/16/2022</p> <ul> <li>Fixed issue with weather part of the status message</li> </ul> </li> <li> <p>01/15/2022 - Minor update</p> <ul> <li>Fixed error in message sending to Pushover</li> <li>Fixed error in packet status creation with fixed station</li> <li>Fixed error in sending messages notification via Discord</li> </ul> </li> <li> <p>01/12/2022 - Version 6.0 Release</p> <ul> <li>Added support for Discord and Pushover for Message Notitification</li> <li>Added Support for Mattermost for Position and Weather packet data</li> <li>Split out configuration for message notification to new screen in Config Utility</li> <li>Added number of callsigns in the callsign lists on Config Utility</li> <li>Added the prevention of adding more callsigns then able to be handled by aprs.fi api</li> <li>Pull version number from database for Config Utility</li> </ul> </li> <li> <p>05/30/2021</p> <ul> <li>Minor updates to README and the wiki. </li> </ul> </li> <li> <p>05/19/2021 - Version 5.0 Release</p> <ul> <li>Update of APRSNotify Database to consolidate callsign lists to one table</li> <li>Redesign of an_util.py into a Flask app to allow for web browser based GUI to configure the script.</li> <li>Addition of Discord to supported networks.</li> <li>Automatically does not send a map image with WX Station Data or message notification to Telegram</li> <li>Updated Wiki with new information.</li> </ul> </li> <li> <p>01/15/2021 - Version 4.0 Release</p> <ul> <li>Removal of APRSBot to a different project</li> <li>Moved from text files for data storage to SQLlite3 Database</li> <li>Various small bug fixes and rework of the code.</li> <li>Added: ability to send status to Mastodon</li> <li>Added: an_util.py configuration utility for interacting with the database</li> <li>Added: New wiki user guide.</li> <li>Added: Parsing of Weather Data packet from APRS.</li> </ul> </li> <li> <p>12/11/2020 - Release 3.1 - Fixes around APRS.FI API limitations</p> <ul> <li>APRSnotify</li> <li>Updated aprsnotify.py to split position tracking and messge monitoring lists out to 2 seperate lists due to APRS.fi API restrictions</li> <li>APRSbot</li> <li>Updated aprsbot to fix APRS-IS Timeouts for sending locations and messages</li> <li>README.md</li> <li>Added limitations to the API to the APRS.fi API key section.</li> <li>Other updates and clearifications to README.md</li> <li>Configuration.md</li> <li>Split callsign lists out to position tracking list and message list. This is due to limitations on the APRS.fi API</li> </ul> </li> <li> <p>12/09/2020 - Minor update</p> <ul> <li>Fixed Bug: fixed error in setup.py. Named the config file wrong in variable. (Found by Alex Bowman, KN4KNG)</li> </ul> </li> <li> <p>11/15/2020 - Version 3.0 Release</p> <ul> <li>Added/New Features:</li> <li>Added a requirements.txt file to make installing libraries easier for end users</li> <li>Added checks to make sure all python libraries needed are installed already and notify the user if not and how to install</li> <li>Created and added new interactive bot functionality, APRSBot</li> <li>Updates/Changes:</li> <li>Changed from urllib to requests library to parse json. This makes it easier to use the same url for different purposes</li> <li>Removed the aprs and msg url variables and combined into aprsfi_url variable for use with new library</li> <li>Fixed bug: added srccall variable instantiation. This fixes a bug where if the srccall is not pulled properly the script bombs</li> <li>Removed using Google Geocoder for Reverse geocoding. Only using OpenStreetMaps now</li> <li>Updated README.md and Configuration.md files</li> </ul> </li> <li> <p>08/20/2020</p> <ul> <li>Updates to the ReadMe file</li> </ul> </li> <li> <p>07/06/2020 - Version 2.0 Release</p> <ul> <li>Added/New Features:</li> <li>Ability to choose between Metric and Imperial units</li> <li>Ability to turn off WX Information and not include it in the status message.</li> <li>Now sends notification if someone sends the user a message on APRS (requires Telegram bot for this to work).</li> <li>Sends map image of the packet location to Telegram (requires Telegram bot for this to work).</li> <li>Updates:</li> <li>Fixed: If there is not a speed entry in the JSON payload from APRS.FI, the script assumes it's a fixed station and does not include speed in the status message. In Ver. 1.0 this was a bug that would cause the script to fail if there was not a speed entry in the JSON payload.</li> <li>Updated the config file to include switches for new features.</li> <li>Updated the configuration walkthrough in this repo.</li> <li>Updated Setup.py to include switches for new features. Will also update an existing config.py file to the new version. <ul> <li>NOTE: If you are running version 1, when updating to Version 2 of the script, make sure to run setup.py to update your existing config.py file to the correct config version.</li> </ul> </li> <li>Reworked and tighten up code in the main script</li> </ul> </li> <li> <p>02/29/2020 - Initial Release 1.0</p> <ul> <li>Combined functionality of APRSTweet and APRSTelegram</li> <li>Added: Ability to choose to send to Twitter, Telegram or All</li> <li>Added: Ability to choose between OpenStreetMaps and Google Geocoding API for reverse geocoding of packet location</li> <li>Added: Added the hashtag #APRS to the end of the status message for Twitter</li> <li>Added: Finds the Maidenhead Grid Square based on packet location and includes it in the status message</li> <li>Added: Created setup utility to help in config file creation.</li> <li>Update: Fixed URL for aprs.fi in the status message from http:// to https://</li> </ul> </li> </ul>"},{"location":"configuration_guide/","title":"Configuration Utility","text":""},{"location":"configuration_guide/#running-the-utility","title":"Running the Utility","text":"<p>Running the utility can be accomplished either manually or with Docker. If you are using Docker, the utility container was created when everything was spun up. You will only need to connect to the webaddress to access the utility.</p> <p>Please note that if you are using Docker, you will not need to manually start the utility program to make changes. The utility will be available aslong as you leave the container running. If you stopped the container, you will need to restart it to access the utility to make changes.</p> <p>To run the utility manually, in the directory where you have the scripts files, please run the following command in the terminal or command line:</p> <pre><code>cd aprsnotify/an_util\n\npython3 an_util.py\n</code></pre> <p>You will need to then leave this window open to keep the program running while you are making changes. If you close the window, the script will stop and then you will not be able to connect to the application to make changes.</p>"},{"location":"configuration_guide/#disclaimer","title":"Disclaimer","text":"<p>As stated on the front page of the Wiki, when you run the an_util.py, this will start a small webserver for you to connect to in order to make changes to the configurations of the script.</p> <p>I would recommend NOT exposing this web server to the outside world. It is an insecure server and only designed to be run behind a secured firewall. </p> <p>If you need to make changes and are not at home, I would recommend setting up a secure way to connect back into your network, preferably by a VPN, to run and make changes.</p> <p>You have thusly been warned and it is now your responsibiliy to make sure you are running things securely.</p>"},{"location":"configuration_guide/#connecting-to-the-utility","title":"Connecting to the Utility","text":"<p>an_util is a Flask app. Flask is a web framework in Python that basically allows you to run a python application as a web application. As such, you will need a web browser to work with the configuration utility.</p> <p>The webserver for an_util runs on port 5001. So if you have this running on a Raspberry Pi for example, you would use the ip address of the Pi and port 5001.</p> <p>So you will need to enter the ipaddress and port number of 5001 of the server into your web browser like the following:</p> <pre><code>http://10.0.0.1:5001\n</code></pre> <p>From there, it works just like a regular website.</p> <p>If you need to find the IP Address of the machine you are running the utility on, in Linux, you can type the following command:</p> <pre><code>ifconfig\n</code></pre> <p>and it will display the IP address of your device.</p> <p>To navigate through any of the menus in the program, just click on the selection you want.</p>"},{"location":"configuration_guide/#1-main-menu","title":"1: Main Menu","text":"<p>When you first connect to the utiltiy from the browser, you are presented with one of 2 following screens:</p> <p>If you are NOT using the Apprise-API for notification management, you will see the following:</p> <p></p> <p>If you ARE using the Apprise-API, you will see the following:</p> <p></p> <p>This is the main menu. From here you can select where to go. Just click on the option you want to configure.</p>"},{"location":"configuration_guide/#2-main-program-configuration-settings","title":"2: Main Program Configuration Settings","text":"<p>After choosing this option, you are presented with the following screen:</p> <p></p> <p>Here you can set the following options:</p> <ul> <li>Units to use - This lets you set whether to use Imperial (inches, feet, miles, Fahrenheit) or Metric (Kilomoters, meters, Celcius)</li> <li>Time to wait for Checks (in seconds) - This sets how long the program should wait to check for new packets. Default is 600 Seconds (10 Minutes).</li> <li>Note that the minimum allowed time is 600 seconds. This is to be nice to the APRS.Fi and WeatherAPI APIs.</li> <li>Your Timezone - Set your Timezone here.</li> <li>Use Apprise-API - If you are using the Apprise-API for notification management, turn this on. (Note this changes the Main Menu screen to show the Apprise-API links)</li> <li>APRS.Fi API Key - This is your APRS.Fi API Key, obtained during the <code>Obtain API Keys</code> Step</li> <li>WeatherAPI API Key - This is your WeatherAPI.com API key, obtained during the <code>Obtain API Keys</code> Step</li> </ul>"},{"location":"configuration_guide/#3-callsign-tracking-list-configuration","title":"3: Callsign Tracking List Configuration","text":"<p>After choosing this option, you will be presented with the following menu:</p> <p></p> <p>Here is where you can add or delete callsigns from tracking for the different lists.</p> <p>Adding Note that when adding a station, you need to include the SSID of the station. The application will not do a fuzzy search. ex: N8ACL-9</p> <p>Also, when adding a station, make sure to select the correct list from the drop down at the end of the line.</p> <p>Hit Add</p> <p>Deleting When deleteing, select the callsign you want to remove from the drop down and then select what list you want it removed from in the next drop down. Make sure to double check that is the callsign you want to remove. Once you confirm the deletion, there is no way to go back and recover it. You will need to re-add it.</p>"},{"location":"configuration_guide/#4-configure-social-media-services","title":"4: Configure Social Media Services","text":"<p>After Selecting this option, you will be presented with a menu similar to this one:</p> <p></p> <p>This allows you to select one of the supported services to add a new one. Once you click on a button, you will be taken to a screen similar to this:</p> <p></p> <p>Each Service will be a little different. In order to add a new service, please make sure to enter all the information that is asked for on the screen.</p>"},{"location":"configuration_guide/#5-update-your-existing-services","title":"5: Update Your Existing Services","text":"<p>When you click on this option, you will be presented with a screen similiar to this:</p> <p></p> <p>This will list all your currently configured services. From here, you will be able to select which one of the services/links that you want to update. By clicking on one of the update buttons at the end of the line, this will bring you to a screen similiar to this:</p> <p></p> <p>Each configured service will be a little different. Make your changes to that service and then click submit. This will update that services data.</p>"},{"location":"configuration_guide/#6-configure-apprise-api-advanced-feature","title":"6: Configure Apprise-API (Advanced Feature)","text":"<p>Note that this feature is for advanced users.</p> <p>If you want to use the Apprise-API for notification management, you will need to first have Apprise and Apprise-API setup on a server somewhere. Then you will need to make sure to configure some services in there to use. Make sure to set tags for each type of notification that APRSnotify uses (POS, WX and MSG).</p> <p>So for example, if you have a personal and club service setup for position reporting, you will need to tag the two urls and then add then to one tag. This is all explained in the Apprise-API documentation.</p> <p>When you click on this option, you will be presented with a screen similiar to this:</p> <p></p> <p>Here you will need to enter the following:</p> <ul> <li>Apprise-API URL: This is the URL of your Apprise-API service.</li> <li>Apprise-API Config Key: This is the key name of the config that APRSNotify should look for the service URLs that were setup.</li> <li>Apprise-API Position Tags: This is a list of tags that can be used to send position reports to.</li> <li>Apprise-API Message Tags: This is a list of tags that can be used to send message reports to.</li> <li>Apprise-API Weather Tags: This is a list of tags that can be used to send weather reports to.</li> </ul> <p>If a tag type is not used, you can either leave the default or clear it out.</p>"},{"location":"configuration_guide/#ending-the-program","title":"Ending the program","text":"<p>Once you are done with configuring options, you can just close your web browser.</p> <p>If you started the program manually, you will need to hit CTRL-C in the terminal window you left open to exit the program.</p> <p>Otherwise if running in Docker, just leave it alone.</p>"},{"location":"docker/","title":"Docker Installation (Recommended)","text":"<p>If you want to migrate your data, see the <code>Migration Guide</code> then come back here and build the containers, then go to the <code>Run the Containers</code> section.</p> <p>In order to use the docker containers, you will need to build them locally.</p> <p>This assumes that you already have Docker and Docker Compose installed. If you do not, you will need to install those for the operating system you are running. There are many tutorials online on how to do this.</p> <p>Clone the repo and then enter into that new directory:</p> <pre><code>git clone https://github.com/n8acl/aprsnotify.git\n\ncd aprsnotify\n</code></pre>"},{"location":"docker/#building","title":"Building","text":"<p>Next, using Docker Compose, let's build the containers:</p> <pre><code>docker compose build\n</code></pre>"},{"location":"docker/#configure-the-database-connection","title":"Configure the Database Connection","text":"<p>APRSNotify supports the use of MySQL/MariaDB, PostgreSQL, Microsoft SQL Server and Sqlite databases for configuration management. Of these, Sqlite does not need a username and password setup for the script to access the database. However the others do. You will need to setup a user in your database system before setting up the database connection.</p> <p>It is recommended to NOT use any System Administrator accounts or any account that has administrative rights on your Database system. You should create a user account that has at least the following privileges: - Create Database - Create Tables - Select, Insert, Update, and Delete on tables.</p> <p>Once you have the user created and the containers built as noted above, edit the <code>config.json</code> file in your favorite editor. Here we will need to set the database connection settings. </p> <pre><code>{\n  \"database\": {\n    \"rdbms_type\": \"\",\n    \"credentials\": {\n      \"username\": \"\",\n      \"password\": \"\",\n      \"host\": \"\"\n    }\n  }\n}\n</code></pre> <p>We will need to update the following settings:</p> <ul> <li><code>\"rdbms_type\": \"\",</code> - set this to one of the following settings, depending on the database management system you want to use:<ul> <li><code>sqlite</code> - This is the default database that is used by Python. This creates a database file in your APRSNotify folder. Use this if you don't have another Database solution.</li> <li><code>mysql</code> - This will connect to MySQL/MariaDB. This is a free open source Database Management System.</li> <li><code>postgresql</code> - This will connect to PostgreSQL. This is another free open source Database Management System.</li> <li><code>mssql</code> - This will connect to Microsoft SQL Server. This is normally a paid for product, but SQL Server can be used with a devloper licence for personal use, IE it is not being used for in a business production environment.</li> </ul> </li> <li><code>\"username\": \"\",</code> - This is the user that can connect to your database. Note this is optional for SQlite databases only.</li> <li><code>\"password\": \"\",</code> - This is the password for the user account above. Note this is optional for SQlite databases only.</li> <li><code>\"host\": \"\"</code> - This is the FQDN or IP Address of the Database server host.</li> </ul> <p>Save the file.</p>"},{"location":"docker/#run-the-containers","title":"Run the Containers","text":"<p>Make sure to modiy the volume directives in the <code>docker-compose.yaml</code> file to point to the correct path for your aprsnotify directory.</p> <p>Now we just need to bring up the containers:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation-steps","title":"Installation Steps","text":"<pre><code>1) Setup Config file\n2) Obtain API Keys\n3) Install needed packages, clone Repo and install library dependencies\n4) Run the Script\n5) Set all other configuration options\n</code></pre> <p>Remember that all the commands shared here are for Linux. So if you want you can run this on a Linux Server or even a Raspberry Pi, which is how I see most of these run. In fact I have mine running on a Raspberry Pi 3B+.</p> <p>If you want to run this on a Windows or Mac machine, you will need to be able to install Python3 and be familiar installing from a requirements.txt.</p>"},{"location":"getting_started/#obtaining-api-keys","title":"Obtaining API Keys","text":"<p>The first step in this process will be obtaining the few API keys that you need. Each service will be configured later.</p>"},{"location":"getting_started/#aprsfi-api-key","title":"APRS.fi API Key","text":"<ul> <li>First and foremost, you will need an APRS.fi account. On your account page is the API key you will need. Without this, nothing else will work and there is no point to the script :).<ul> <li>NOTE: There is a limit to this API. You can use 20 callsigns to find the positions/Weather of and 10 to pull messages for. Please also make sure to keep the amount of calls to a minimum. I recommend no more often than every 10 minutes. That is 6 calls an hour at max.</li> </ul> </li> </ul>"},{"location":"getting_started/#weatherapi-key","title":"WeatherAPI Key","text":"<ul> <li>Next you will need a key from WeatherAPI.com to pull the current weather conditions for the location of the position packet. </li> <li>Once you are signed in, your API Key will be at the top of the screen. </li> <li>NOTE: This is a free account, but you are limited to 1 Million API calls per month.</li> </ul>"},{"location":"getting_started/#migration","title":"Migration","text":"<p>If you are currently using an existing version of APRSNotfiy, you can migrate your existing database to the new version to give you a jump start on configuring things.</p> <p>Please see the <code>Migration Guide</code> for more information.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Once you have these 2 keys, you can install the software. There are 2 ways to run this application * Manual Installation - The steps listed here are for a brand new installation * Docker Installation - The steps listed here are for a brand new installation</p>"},{"location":"install/","title":"Manual Installation","text":""},{"location":"install/#manual-installation","title":"Manual Installation","text":"<p>These steps are for a brand new installation. If you want to migrate your data, see the <code>Migration Guide</code> then come back here and go to the <code>Configure the Script</code> section.</p> <p>Manual installation will allow you to run the script directly from the command line and let it run.</p> <p>To install the script please run the following commands:</p> <p>First install needed packages:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get -y upgrade &amp;&amp; sudo apt-get -y dist-upgrade\n\nsudo apt-get install python3 python3-pip git screen\n</code></pre> <p>Clone the repository:</p> <pre><code>git clone https://github.com/n8acl/aprsnotify.git\n</code></pre> <p>Switch to the repository and install the required Python Packages:</p> <pre><code>cd aprsnotify\n\npip3 install -r requirements.txt\n</code></pre>"},{"location":"install/#configure-the-database-connection","title":"Configure the Database Connection","text":"<p>APRSNotify supports the use of MySQL/MariaDB, PostgreSQL, Microsoft SQL Server and Sqlite databases for configuration management. Of these, Sqlite does not need a username and password setup for the script to access the database. However the others do. You will need to setup a user in your database system before setting up the database connection.</p> <p>It is recommended to NOT use any System Administrator accounts or any account that has administrative rights on your Database system. You should create a user account that has at least the following privileges: - Create Database - Create Tables - Select, Insert, Update, and Delete on tables.</p> <p>Once you have the user created, edit the <code>config.json</code> file in your favorite editor. Here we will need to set the database connection settings. </p> <pre><code>{\n  \"database\": {\n    \"rdbms_type\": \"\",\n    \"credentials\": {\n      \"username\": \"\",\n      \"password\": \"\",\n      \"host\": \"\"\n    }\n  }\n}\n</code></pre> <p>We will need to update the following settings:</p> <ul> <li><code>\"rdbms_type\": \"\",</code> - set this to one of the following settings, depending on the database management system you want to use:<ul> <li><code>sqlite</code> - This is the default database that is used by Python. This creates a database file in your APRSNotify folder. Use this if you don't have another Database solution.</li> <li><code>mysql</code> - This will connect to MySQL/MariaDB. This is a free open source Database Management System.</li> <li><code>postgresql</code> - This will connect to PostgreSQL. This is another free open source Database Management System.</li> <li><code>mssql</code> - This will connect to Microsoft SQL Server. This is normally a paid for product, but SQL Server can be used with a devloper licence for personal use, IE it is not being used for in a business production environment.</li> </ul> </li> <li><code>\"username\": \"\",</code> - This is the user that can connect to your database. Note this is optional for SQlite databases only.</li> <li><code>\"password\": \"\",</code> - This is the password for the user account above. Note this is optional for SQlite databases only.</li> <li><code>\"host\": \"\"</code> - This is the FQDN or IP Address of the Database server host.</li> </ul> <p>Save the file and then run the install script to create the database:</p> <pre><code>python3 install.py\n</code></pre> <p>Now you have everything installed and are ready to configure the script.</p>"},{"location":"install/#configure-the-script","title":"Configure the Script","text":"<p>Once you have your API Keys, have cloned the repo and installed everything, you can now start configuring your APRSNotify bot. To start the process, run the following commands:</p> <pre><code>cd aprsnotify\n\npython3 an_util.py\n</code></pre> <p>This will start the setup/configuration utility. The utility is a Flask app, which means that once it is running, it will start a web server that you can connect to via a web browser and configure the script that way.</p> <p>If in the future you want to make changes to the stored data, just run the an_util.py script again and then connect to the web server the same way.</p> <p>Details about how the configuration utility works are found in the Configuration Utility Guide page on the Wiki.</p>"},{"location":"install/#running-the-script","title":"Running the Script","text":"<p>You will need to configure the scripts settings in the configuration utility first and once you have done that, you can run the script for the first time. To run the script, you can use the following commands</p> <pre><code>screen -R aprsnotify\n\npython3 aprsnotify.py\n</code></pre> <p>in the directory where you have the script's files. When you run this, you will see the latest packet you sent sent to your bot account on whatever network(s) you are using. This let's you know that you have everything configured correctly and everything is working fine.</p> <p>The script will continue to run, checking for new packets every 10 minutes (600 second) by default and then sending the packet out. This can be changed, but 10 minutes is the minimum the script will except. This is sufficent to give people an idea of where you are/Where you have been. This is not meant to be a realtime tracker. If you have your mobile station set to send packets every 5 minutes as you drive, 10 minute checks means that at least every other packet will be sent. 10 Minutes also allows us to be nice to the API that we are using to check for packets.</p> <p>If you notice that you are not sending packets all of a sudden, please check to make sure that the script did not error out with:</p> <pre><code>screen -R aprsnotify\n</code></pre> <p>If it errored out, you can restart it with:</p> <pre><code>python3 aprsnotify.py\n</code></pre>"},{"location":"migration/","title":"Migration","text":"<p>If you are a current user of APRSNotify, you can migrate your database into the new format.</p> <p>Note: Only the 02032023 release is supported for migration. If you are running something older then that, you will need to manually migrate your database. Start with the installation of the program as a new installation in the <code>Installation Guide</code></p> <p>In order to migrate your database:</p> <p>Copy your existing database (<code>aprsnotify.db</code>) to a new location.</p> <pre><code>cd aprsnotify\n\ncp aprsnotify.db ~/tmp/aprsnotify.db\n</code></pre> <p>Remove the old Version of APRSNotify from your system:</p> <pre><code>rm -R APRSNotify\n</code></pre> <p>Clone the repo:</p> <pre><code>git clone https://github.com/n8acl/aprsnotify.git\n</code></pre> <p>Install dependencies:</p> <pre><code>pip3 install -r requirements.txt --break-system-packages\n</code></pre> <p>Copy the old database back into the new folder:</p> <pre><code>cd aprsnotify\n\ncp ~/tmp/aprsnotify.db aprsnotify.db\n</code></pre> <p>Configure new database connection as described in the <code>Configure the Database Connection</code> of the <code>Manual Installation</code> Guide.</p> <p>Run the <code>migrate.py</code> script. This will create the database and tables as well as move most of your old data from the old database.</p> <p>Note that due to the way Mastodon and Mattermost are now handled, if you were using those services, this data will not be migrated and you will need to configure this by hand in the new database with the APRSNotify Configuration Utility as talked about in the <code>Configuration Guide</code>.</p> <pre><code>python3 migrate.py\n</code></pre> <p>You can now proceed with the rest of either the manual or Docker installations.</p>"},{"location":"revision_explaination/","title":"Revisions Explaination","text":"<p>While updating the code to APRSNotify2, I decided to move from a dated version release (like what Home Assistant does) back to a classic Major.Minor.Build versioning format. The dated release versioning was just too confusing for me to keep track of, so I decided to change back. </p> <p>With the initial release of APRSNotify2, I also decided to revert back to starting with Version 1.0.0 since this is basically an all new program with all the changes to how the backend works.</p> <p>I wanted to explain though how I will be using the versioning format, IE what will trigger a certain release.</p>"},{"location":"revision_explaination/#what-will-trigger-a","title":"What will trigger a:","text":""},{"location":"revision_explaination/#major-version-release","title":"Major Version Release?","text":"<p>This would be any massive change to the entire code base and how the program functions. So things like moving something into a function call or moving from Apprise to something else, or major changes to the Configuration Utility or an update to the database. Anything that effects how the code runs on the backend will trigger a major release.</p>"},{"location":"revision_explaination/#minor-version-release","title":"Minor Version Release?","text":"<p>This would be any additions or subtractions of things that doesn't effect the whole codebase. So adding a supported service or deleteing a supported service or updates to the HTML templates for the Configuration Utility would be examples of what would trigger a minor release.</p>"},{"location":"revision_explaination/#build-release","title":"Build Release?","text":"<p>This would be any bug fixes to the current codebase. If a bug or bugs are found and fixed, this would trigger a build release.</p>"},{"location":"supported_services/","title":"Supported Services","text":"<p>The following are the communication services that are supported directly in APRSNotify. Apprise-API supports others. See the Using Apprise-API page for more information.</p>"},{"location":"supported_services/#sending-postionweather-packet-data","title":"Sending Postion/Weather Packet Data","text":"<p>This is for sending a postion/weather packet to the specified service. </p> <pre><code>- Telegram\n- Mastodon\n- Discord\n- Mattermost\n- Slack\n- Matrix\n- Signal\n- DAPNET\n</code></pre>"},{"location":"supported_services/#sending-message-notification","title":"Sending Message Notification","text":"<p>This is for getting notifcation of a message sent to a tracked callsign.</p> <pre><code>- Telegram\n- Discord\n- Pushover*\n- Mattermost\n- Slack\n- Matrix\n- Signal\n- DAPNET\n</code></pre> <ul> <li>Due to Pushover being a paid service it is limited to only message notifications natively.</li> </ul>"}]}